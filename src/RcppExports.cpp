// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rig
double rig(double mu);
RcppExport SEXP _SUFA_rig(SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(rig(mu));
    return rcpp_result_gen;
END_RCPP
}
// fast_fact_inv
arma::mat fast_fact_inv(const arma::mat& Lambda, const arma::vec& ps);
RcppExport SEXP _SUFA_fast_fact_inv(SEXP LambdaSEXP, SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_fact_inv(Lambda, ps));
    return rcpp_result_gen;
END_RCPP
}
// fast_fact_det
double fast_fact_det(const arma::mat& Lambda_orig, const arma::vec& ps, const bool lg);
RcppExport SEXP _SUFA_fast_fact_det(SEXP Lambda_origSEXP, SEXP psSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda_orig(Lambda_origSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ps(psSEXP);
    Rcpp::traits::input_parameter< const bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_fact_det(Lambda_orig, ps, lg));
    return rcpp_result_gen;
END_RCPP
}
// log_det_pd
double log_det_pd(const arma::mat& X, const bool lg);
RcppExport SEXP _SUFA_log_det_pd(SEXP XSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_pd(X, lg));
    return rcpp_result_gen;
END_RCPP
}
// cov_est_HMC
Rcpp::List cov_est_HMC(double ms, double ss, double a, int nrun, int burn, int thin, unsigned nleapfrog, arma::vec del_range, arma::mat phimat, arma::mat Y, unsigned leapmin, unsigned leapmax);
RcppExport SEXP _SUFA_cov_est_HMC(SEXP msSEXP, SEXP ssSEXP, SEXP aSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP nleapfrogSEXP, SEXP del_rangeSEXP, SEXP phimatSEXP, SEXP YSEXP, SEXP leapminSEXP, SEXP leapmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ms(msSEXP);
    Rcpp::traits::input_parameter< double >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nleapfrog(nleapfrogSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type del_range(del_rangeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phimat(phimatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned >::type leapmin(leapminSEXP);
    Rcpp::traits::input_parameter< unsigned >::type leapmax(leapmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_est_HMC(ms, ss, a, nrun, burn, thin, nleapfrog, del_range, phimat, Y, leapmin, leapmax));
    return rcpp_result_gen;
END_RCPP
}
// DL_MSFA
Rcpp::List DL_MSFA(double as, double bs, double a, int nrun, int burn, int thin, Rcpp::List Lambda_list, Rcpp::List f_list, Rcpp::List Y_list, Rcpp::List l_list, arma::mat phimat, unsigned S);
RcppExport SEXP _SUFA_DL_MSFA(SEXP asSEXP, SEXP bsSEXP, SEXP aSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP Lambda_listSEXP, SEXP f_listSEXP, SEXP Y_listSEXP, SEXP l_listSEXP, SEXP phimatSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type as(asSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Lambda_list(Lambda_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_list(Y_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type l_list(l_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phimat(phimatSEXP);
    Rcpp::traits::input_parameter< unsigned >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(DL_MSFA(as, bs, a, nrun, burn, thin, Lambda_list, f_list, Y_list, l_list, phimat, S));
    return rcpp_result_gen;
END_RCPP
}
// cov_est
Rcpp::List cov_est(double as, double bs, double a, int nrun, int burn, int thin, arma::mat phimat, arma::mat eta, arma::mat Y);
RcppExport SEXP _SUFA_cov_est(SEXP asSEXP, SEXP bsSEXP, SEXP aSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP phimatSEXP, SEXP etaSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type as(asSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phimat(phimatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_est(as, bs, a, nrun, burn, thin, phimat, eta, Y));
    return rcpp_result_gen;
END_RCPP
}
// SUFA_HMC
Rcpp::List SUFA_HMC(const unsigned nrun, const unsigned thin, unsigned nleapfrog, const arma::vec del_range, const arma::vec ps_hyper, const arma::vec A_hyper, const double a, Rcpp::List Y_list, const arma::uvec ks, arma::mat phi_init, unsigned leapmax, unsigned leapmin, const double col_prob, const int nthreads);
RcppExport SEXP _SUFA_SUFA_HMC(SEXP nrunSEXP, SEXP thinSEXP, SEXP nleapfrogSEXP, SEXP del_rangeSEXP, SEXP ps_hyperSEXP, SEXP A_hyperSEXP, SEXP aSEXP, SEXP Y_listSEXP, SEXP ksSEXP, SEXP phi_initSEXP, SEXP leapmaxSEXP, SEXP leapminSEXP, SEXP col_probSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nleapfrog(nleapfrogSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type del_range(del_rangeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ps_hyper(ps_hyperSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type A_hyper(A_hyperSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_list(Y_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi_init(phi_initSEXP);
    Rcpp::traits::input_parameter< unsigned >::type leapmax(leapmaxSEXP);
    Rcpp::traits::input_parameter< unsigned >::type leapmin(leapminSEXP);
    Rcpp::traits::input_parameter< const double >::type col_prob(col_probSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(SUFA_HMC(nrun, thin, nleapfrog, del_range, ps_hyper, A_hyper, a, Y_list, ks, phi_init, leapmax, leapmin, col_prob, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matchalign_permmat
arma::mat matchalign_permmat(arma::mat lambda, arma::mat pivot);
RcppExport SEXP _SUFA_matchalign_permmat(SEXP lambdaSEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(matchalign_permmat(lambda, pivot));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SUFA_rig", (DL_FUNC) &_SUFA_rig, 1},
    {"_SUFA_fast_fact_inv", (DL_FUNC) &_SUFA_fast_fact_inv, 2},
    {"_SUFA_fast_fact_det", (DL_FUNC) &_SUFA_fast_fact_det, 3},
    {"_SUFA_log_det_pd", (DL_FUNC) &_SUFA_log_det_pd, 2},
    {"_SUFA_cov_est_HMC", (DL_FUNC) &_SUFA_cov_est_HMC, 12},
    {"_SUFA_DL_MSFA", (DL_FUNC) &_SUFA_DL_MSFA, 12},
    {"_SUFA_cov_est", (DL_FUNC) &_SUFA_cov_est, 9},
    {"_SUFA_SUFA_HMC", (DL_FUNC) &_SUFA_SUFA_HMC, 14},
    {"_SUFA_matchalign_permmat", (DL_FUNC) &_SUFA_matchalign_permmat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SUFA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
